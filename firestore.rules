rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a member of a chat
    function isChatMember(chatId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/chats/$(chatId)/members/$(request.auth.uid));
    }
    
    // Helper function to check if user is an admin of a chat
    function isChatAdmin(chatId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/chats/$(chatId)/admins/$(request.auth.uid));
    }

    // Users collection - allow authenticated users to read all users, write their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOwner(userId);
    }

    // Chats collection - allow authenticated users to read/write
    match /chats/{chatId} {
      allow read, write: if isAuthenticated();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
      
      // Members subcollection
      match /members/{memberId} {
        allow read, write: if isAuthenticated();
      }
      
      // Admins subcollection
      match /admins/{adminId} {
        allow read, write: if isAuthenticated();
      }
      
      // Settings subcollection
      match /settings/{settingId} {
        allow read, write: if isAuthenticated();
      }
    }

    // Direct messages collection
    match /directMessages/{dmId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
    }

    // User status collection
    match /userStatus/{userId} {
      allow read, write: if isAuthenticated();
    }

    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.fromUserId;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.toUserId;
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
    }

    // Friends collection
    match /friends/{friendshipId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid in resource.data.userIds);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
    }

    // Server-wide settings (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only allow admin writes through backend
    }

    // Allow all authenticated users to read/write for development
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
} 